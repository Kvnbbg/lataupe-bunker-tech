#!/usr/bin/env python3
"""
Scripts d'automatisation pour le d√©ploiement Railway
Facilite la configuration et le d√©ploiement de lataupe-bunker-tech sur Railway
"""

import os
import json
import subprocess
import sys
from pathlib import Path

def create_railway_cli_scripts():
    """Cr√©e les scripts CLI pour Railway"""
    
    scripts = {}
    
    # Script de configuration Railway
    scripts['scripts/railway-setup.sh'] = """#!/bin/bash
# Script de configuration Railway pour lataupe-bunker-tech

set -e

# Couleurs pour les logs
RED='\\033[0;31m'
GREEN='\\033[0;32m'
YELLOW='\\033[1;33m'
BLUE='\\033[0;34m'
NC='\\033[0m'

log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_step() {
    echo -e "${BLUE}[STEP]${NC} $1"
}

echo "üöÇ Configuration Railway pour Lataupe Bunker Tech"
echo "================================================="

# V√©rifier si Railway CLI est install√©
if ! command -v railway &> /dev/null; then
    log_error "Railway CLI n'est pas install√©"
    log_info "Installation de Railway CLI..."
    
    # Installer Railway CLI
    if [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS
        brew install railway
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        # Linux
        curl -fsSL https://railway.app/install.sh | sh
    else
        log_error "OS non support√©. Installez Railway CLI manuellement: https://docs.railway.app/develop/cli"
        exit 1
    fi
fi

# V√©rifier l'authentification
log_step "V√©rification de l'authentification Railway..."
if ! railway whoami &> /dev/null; then
    log_warn "Non authentifi√© sur Railway"
    log_info "Connexion √† Railway..."
    railway login
fi

log_info "Utilisateur connect√©: $(railway whoami)"

# Cr√©er le projet Railway
log_step "Cr√©ation du projet Railway..."
read -p "Nom du projet Railway (lataupe-bunker-tech): " PROJECT_NAME
PROJECT_NAME=${PROJECT_NAME:-lataupe-bunker-tech}

# Initialiser le projet
if railway status &> /dev/null; then
    log_warn "Projet Railway d√©j√† initialis√©"
else
    railway init --name "$PROJECT_NAME"
fi

# Configurer les variables d'environnement
log_step "Configuration des variables d'environnement..."

# Variables de base
railway variables set FLASK_ENV=production
railway variables set PYTHONUNBUFFERED=1
railway variables set PORT=8080

# G√©n√©rer une cl√© secr√®te
SECRET_KEY=$(python3 -c "import secrets; print(secrets.token_hex(32))")
railway variables set SECRET_KEY="$SECRET_KEY"

# Configurer la base de donn√©es PostgreSQL
log_step "Configuration de la base de donn√©es..."
railway add postgresql
log_info "Base de donn√©es PostgreSQL ajout√©e"

# Configurer Redis (optionnel)
read -p "Ajouter Redis pour le cache? (y/N): " ADD_REDIS
if [[ $ADD_REDIS =~ ^[Yy]$ ]]; then
    railway add redis
    log_info "Redis ajout√© pour le cache"
fi

# Configurer les domaines
log_step "Configuration des domaines..."
railway domain

# Afficher les informations du projet
log_step "Informations du projet:"
railway status
railway variables

log_info "‚úÖ Configuration Railway termin√©e!"
log_info "üöÄ D√©ployez avec: railway up"
"""
    
    # Script de d√©ploiement
    scripts['scripts/railway-deploy.sh'] = """#!/bin/bash
# Script de d√©ploiement Railway pour lataupe-bunker-tech

set -e

# Couleurs
GREEN='\\033[0;32m'
YELLOW='\\033[1;33m'
RED='\\033[0;31m'
NC='\\033[0m'

log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

echo "üöÄ D√©ploiement Railway - Lataupe Bunker Tech"
echo "============================================="

# V√©rifier les pr√©requis
if ! command -v railway &> /dev/null; then
    log_error "Railway CLI non install√©. Ex√©cutez ./scripts/railway-setup.sh"
    exit 1
fi

if ! railway status &> /dev/null; then
    log_error "Projet Railway non initialis√©. Ex√©cutez ./scripts/railway-setup.sh"
    exit 1
fi

# V√©rifier les fichiers n√©cessaires
REQUIRED_FILES=(
    "Dockerfile.railway"
    "requirements_railway.txt"
    "main_railway.py"
    "start_railway.sh"
    "railway.json"
)

for file in "${REQUIRED_FILES[@]}"; do
    if [[ ! -f "$file" ]]; then
        log_error "Fichier manquant: $file"
        exit 1
    fi
done

log_info "‚úÖ Tous les fichiers requis sont pr√©sents"

# S√©lectionner l'environnement
echo "Environnements disponibles:"
echo "1) production"
echo "2) staging"
read -p "S√©lectionnez l'environnement (1-2): " ENV_CHOICE

case $ENV_CHOICE in
    1)
        ENVIRONMENT="production"
        ;;
    2)
        ENVIRONMENT="staging"
        ;;
    *)
        log_error "Choix invalide"
        exit 1
        ;;
esac

log_info "D√©ploiement vers l'environnement: $ENVIRONMENT"

# Basculer vers l'environnement
if [[ "$ENVIRONMENT" != "production" ]]; then
    railway environment $ENVIRONMENT
fi

# V√©rifier les variables d'environnement
log_info "V√©rification des variables d'environnement..."
railway variables

# Confirmer le d√©ploiement
read -p "Confirmer le d√©ploiement vers $ENVIRONMENT? (y/N): " CONFIRM
if [[ ! $CONFIRM =~ ^[Yy]$ ]]; then
    log_warn "D√©ploiement annul√©"
    exit 0
fi

# D√©ployer
log_info "üöÄ D√©ploiement en cours..."
railway up --detach

# Attendre le d√©ploiement
log_info "‚è≥ Attente du d√©ploiement..."
sleep 30

# V√©rifier le d√©ploiement
log_info "üîç V√©rification du d√©ploiement..."
DOMAIN=$(railway domain | grep -o 'https://[^[:space:]]*' | head -1)

if [[ -n "$DOMAIN" ]]; then
    log_info "üåç Application d√©ploy√©e: $DOMAIN"
    
    # Test de sant√©
    log_info "üè• Test de sant√©..."
    if curl -f "$DOMAIN/health" > /dev/null 2>&1; then
        log_info "‚úÖ Application en bonne sant√©!"
        log_info "üéâ D√©ploiement r√©ussi!"
        
        # Afficher les logs r√©cents
        log_info "üìã Logs r√©cents:"
        railway logs --tail 20
    else
        log_error "‚ùå Test de sant√© √©chou√©"
        log_error "üìã Logs d'erreur:"
        railway logs --tail 50
        exit 1
    fi
else
    log_error "‚ùå Impossible de r√©cup√©rer le domaine"
    exit 1
fi

log_info "‚úÖ D√©ploiement termin√© avec succ√®s!"
"""
    
    # Script de monitoring
    scripts['scripts/railway-monitor.sh'] = """#!/bin/bash
# Script de monitoring Railway pour lataupe-bunker-tech

set -e

GREEN='\\033[0;32m'
YELLOW='\\033[1;33m'
RED='\\033[0;31m'
BLUE='\\033[0;34m'
NC='\\033[0m'

log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_step() {
    echo -e "${BLUE}[STEP]${NC} $1"
}

echo "üìä Monitoring Railway - Lataupe Bunker Tech"
echo "==========================================="

# V√©rifier Railway CLI
if ! command -v railway &> /dev/null; then
    log_error "Railway CLI non install√©"
    exit 1
fi

# Menu de monitoring
while true; do
    echo ""
    echo "Options de monitoring:"
    echo "1) Status du service"
    echo "2) Logs en temps r√©el"
    echo "3) M√©triques de performance"
    echo "4) Variables d'environnement"
    echo "5) Test de sant√©"
    echo "6) Red√©marrer le service"
    echo "7) Quitter"
    
    read -p "S√©lectionnez une option (1-7): " CHOICE
    
    case $CHOICE in
        1)
            log_step "Status du service..."
            railway status
            ;;
        2)
            log_step "Logs en temps r√©el (Ctrl+C pour arr√™ter)..."
            railway logs
            ;;
        3)
            log_step "M√©triques de performance..."
            railway metrics
            ;;
        4)
            log_step "Variables d'environnement..."
            railway variables
            ;;
        5)
            log_step "Test de sant√©..."
            DOMAIN=$(railway domain | grep -o 'https://[^[:space:]]*' | head -1)
            if [[ -n "$DOMAIN" ]]; then
                if curl -f "$DOMAIN/health" > /dev/null 2>&1; then
                    log_info "‚úÖ Application en bonne sant√©!"
                    curl -s "$DOMAIN/health" | python3 -m json.tool
                else
                    log_error "‚ùå Test de sant√© √©chou√©"
                fi
            else
                log_error "‚ùå Impossible de r√©cup√©rer le domaine"
            fi
            ;;
        6)
            log_step "Red√©marrage du service..."
            read -p "Confirmer le red√©marrage? (y/N): " CONFIRM
            if [[ $CONFIRM =~ ^[Yy]$ ]]; then
                railway restart
                log_info "‚úÖ Service red√©marr√©"
            fi
            ;;
        7)
            log_info "Au revoir!"
            exit 0
            ;;
        *)
            log_error "Option invalide"
            ;;
    esac
done
"""
    
    # Script de rollback
    scripts['scripts/railway-rollback.sh'] = """#!/bin/bash
# Script de rollback Railway pour lataupe-bunker-tech

set -e

RED='\\033[0;31m'
GREEN='\\033[0;32m'
YELLOW='\\033[1;33m'
NC='\\033[0m'

log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

echo "üîÑ Rollback Railway - Lataupe Bunker Tech"
echo "========================================="

# V√©rifier Railway CLI
if ! command -v railway &> /dev/null; then
    log_error "Railway CLI non install√©"
    exit 1
fi

# Lister les d√©ploiements r√©cents
log_info "D√©ploiements r√©cents:"
railway deployments

# Demander le d√©ploiement cible
read -p "ID du d√©ploiement pour rollback: " DEPLOYMENT_ID

if [[ -z "$DEPLOYMENT_ID" ]]; then
    log_error "ID de d√©ploiement requis"
    exit 1
fi

# Confirmer le rollback
log_warn "‚ö†Ô∏è  ATTENTION: Cette action va restaurer l'application √† un √©tat pr√©c√©dent"
read -p "Confirmer le rollback vers $DEPLOYMENT_ID? (y/N): " CONFIRM

if [[ ! $CONFIRM =~ ^[Yy]$ ]]; then
    log_info "Rollback annul√©"
    exit 0
fi

# Effectuer le rollback
log_info "üîÑ Rollback en cours..."
railway rollback $DEPLOYMENT_ID

# V√©rifier le rollback
log_info "‚è≥ V√©rification du rollback..."
sleep 30

DOMAIN=$(railway domain | grep -o 'https://[^[:space:]]*' | head -1)
if [[ -n "$DOMAIN" ]]; then
    if curl -f "$DOMAIN/health" > /dev/null 2>&1; then
        log_info "‚úÖ Rollback r√©ussi!"
        log_info "üåç Application: $DOMAIN"
    else
        log_error "‚ùå Rollback √©chou√© - Test de sant√© KO"
        railway logs --tail 20
    fi
else
    log_error "‚ùå Impossible de v√©rifier le rollback"
fi
"""
    
    return scripts

def create_railway_documentation():
    """Cr√©e la documentation Railway"""
    
    docs = {}
    
    # Guide de d√©ploiement Railway
    docs['docs/RAILWAY_DEPLOYMENT.md'] = """# Guide de D√©ploiement Railway - Lataupe Bunker Tech

## Vue d'ensemble

Ce guide d√©taille le processus de d√©ploiement de l'application Lataupe Bunker Tech sur Railway, une plateforme cloud moderne pour le d√©ploiement d'applications.

## Pr√©requis

### 1. Compte Railway
- Cr√©er un compte sur [railway.app](https://railway.app)
- Installer Railway CLI: `curl -fsSL https://railway.app/install.sh | sh`
- Se connecter: `railway login`

### 2. Repository GitHub
- Code source sur GitHub
- Acc√®s en √©criture au repository
- Secrets configur√©s pour CI/CD

### 3. D√©pendances locales
- Python 3.11+
- Docker (optionnel)
- Git

## Configuration Initiale

### 1. Initialisation du Projet

```bash
# Cloner le repository
git clone https://github.com/kvnbbg/lataupe-bunker-tech.git
cd lataupe-bunker-tech

# Ex√©cuter le script de configuration
chmod +x scripts/railway-setup.sh
./scripts/railway-setup.sh
```

### 2. Variables d'Environnement

Les variables suivantes sont configur√©es automatiquement:

```bash
# Variables de base
FLASK_ENV=production
PYTHONUNBUFFERED=1
PORT=8080
SECRET_KEY=<g√©n√©r√© automatiquement>

# Base de donn√©es (ajout√©e automatiquement)
DATABASE_URL=<PostgreSQL URL>

# Cache (optionnel)
REDIS_URL=<Redis URL>
```

### 3. Services Additionnels

#### PostgreSQL (Requis)
```bash
railway add postgresql
```

#### Redis (Optionnel)
```bash
railway add redis
```

## D√©ploiement

### 1. D√©ploiement Manuel

```bash
# D√©ploiement simple
railway up

# D√©ploiement avec script automatis√©
chmod +x scripts/railway-deploy.sh
./scripts/railway-deploy.sh
```

### 2. D√©ploiement Automatique (CI/CD)

Le d√©ploiement automatique est configur√© via GitHub Actions:

- **Push sur `develop`** ‚Üí D√©ploiement staging
- **Push sur `main`** ‚Üí D√©ploiement production

#### Configuration des Secrets GitHub

```bash
# Secrets requis dans GitHub
RAILWAY_TOKEN_STAGING=<token pour staging>
RAILWAY_TOKEN_PRODUCTION=<token pour production>
STAGING_URL=<URL staging>
PRODUCTION_URL=<URL production>
SLACK_WEBHOOK_URL=<webhook pour notifications>
```

### 3. Environnements

#### Staging
- Branch: `develop`
- URL: `https://lataupe-bunker-staging.railway.app`
- Base de donn√©es: PostgreSQL staging
- Monitoring: Basique

#### Production
- Branch: `main`
- URL: `https://lataupe-bunker.railway.app`
- Base de donn√©es: PostgreSQL production
- Monitoring: Complet avec alertes

## Monitoring et Maintenance

### 1. Health Checks

L'application expose un endpoint de sant√©:

```bash
curl https://your-app.railway.app/health
```

R√©ponse attendue:
```json
{
  "status": "healthy",
  "timestamp": "2024-01-15T10:30:00Z",
  "version": "2.0.0",
  "environment": "production",
  "database": "healthy",
  "cache": "healthy",
  "port": 8080
}
```

### 2. Logs

```bash
# Logs en temps r√©el
railway logs

# Logs r√©cents
railway logs --tail 100

# Logs avec filtre
railway logs --filter "ERROR"
```

### 3. M√©triques

```bash
# M√©triques Railway
railway metrics

# Status du service
railway status
```

### 4. Monitoring Automatis√©

Script de monitoring continu:

```bash
chmod +x scripts/railway-monitor.sh
./scripts/railway-monitor.sh
```

## Gestion des Incidents

### 1. Rollback

En cas de probl√®me apr√®s d√©ploiement:

```bash
# Rollback automatis√©
chmod +x scripts/railway-rollback.sh
./scripts/railway-rollback.sh

# Rollback manuel
railway deployments  # Lister les d√©ploiements
railway rollback <deployment-id>
```

### 2. Red√©marrage

```bash
# Red√©marrage du service
railway restart

# Red√©marrage avec logs
railway restart && railway logs
```

### 3. Debug

```bash
# Connexion au container
railway shell

# Variables d'environnement
railway variables

# Status d√©taill√©
railway status --json
```

## Optimisations Performance

### 1. Configuration Gunicorn

Le fichier `start_railway.sh` configure Gunicorn pour la production:

```bash
gunicorn \\
  --bind 0.0.0.0:$PORT \\
  --workers 2 \\
  --threads 4 \\
  --worker-class gthread \\
  --timeout 30 \\
  --keep-alive 2 \\
  main_railway:app
```

### 2. Mise en Cache

- Redis pour le cache applicatif
- Cache HTTP avec headers appropri√©s
- Cache statique avec CDN

### 3. Base de Donn√©es

- Connection pooling configur√©
- Index optimis√©s
- Requ√™tes optimis√©es

## S√©curit√©

### 1. Variables Sensibles

Toutes les variables sensibles sont stock√©es dans Railway:

```bash
# Ajouter une variable sensible
railway variables set API_KEY=<valeur>

# Lister les variables (valeurs masqu√©es)
railway variables
```

### 2. HTTPS

- HTTPS automatique avec certificats Let's Encrypt
- Redirection HTTP ‚Üí HTTPS
- Headers de s√©curit√© configur√©s

### 3. Authentification

- Tokens Railway s√©curis√©s
- Acc√®s bas√© sur les r√¥les
- Audit logs disponibles

## Troubleshooting

### Probl√®mes Courants

#### 1. √âchec de D√©ploiement

```bash
# V√©rifier les logs de build
railway logs --deployment <deployment-id>

# V√©rifier la configuration
railway status
```

#### 2. Application Inaccessible

```bash
# V√©rifier le health check
curl https://your-app.railway.app/health

# V√©rifier les logs
railway logs --tail 50
```

#### 3. Base de Donn√©es Inaccessible

```bash
# V√©rifier la connexion DB
railway variables | grep DATABASE_URL

# Tester la connexion
railway shell
python3 -c "import psycopg2; print('DB OK')"
```

### Support

- Documentation Railway: [docs.railway.app](https://docs.railway.app)
- Support Railway: [help.railway.app](https://help.railway.app)
- Community Discord: [discord.gg/railway](https://discord.gg/railway)

## Commandes de R√©f√©rence

```bash
# Configuration
railway login                    # Connexion
railway init                     # Initialiser projet
railway link                     # Lier projet existant

# D√©ploiement
railway up                       # D√©ployer
railway up --detach             # D√©ployer en arri√®re-plan

# Monitoring
railway status                   # Status du service
railway logs                     # Logs en temps r√©el
railway logs --tail 100         # Logs r√©cents
railway metrics                  # M√©triques

# Gestion
railway restart                  # Red√©marrer
railway shell                    # Acc√®s shell
railway variables                # Variables d'env

# Domaines
railway domain                   # G√©rer domaines
railway domain add example.com  # Ajouter domaine custom

# Services
railway add postgresql           # Ajouter PostgreSQL
railway add redis               # Ajouter Redis
```

Ce guide couvre tous les aspects du d√©ploiement Railway pour Lataupe Bunker Tech. Pour des questions sp√©cifiques, consultez la documentation Railway ou contactez l'√©quipe de d√©veloppement.
"""
    
    # Guide CI/CD
    docs['docs/CICD_GUIDE.md'] = """# Guide CI/CD - Lataupe Bunker Tech

## Vue d'ensemble

Ce guide d√©taille le pipeline CI/CD complet pour l'application Lataupe Bunker Tech, utilisant GitHub Actions pour l'int√©gration continue et Railway pour le d√©ploiement continu.

## Architecture CI/CD

```
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ   Developer     ‚îÇ    ‚îÇ   GitHub Actions ‚îÇ    ‚îÇ    Railway      ‚îÇ
‚îÇ                 ‚îÇ    ‚îÇ                  ‚îÇ    ‚îÇ                 ‚îÇ
‚îÇ git push        ‚îÇ‚îÄ‚îÄ‚îÄ‚ñ∂‚îÇ 1. Tests         ‚îÇ‚îÄ‚îÄ‚îÄ‚ñ∂‚îÇ 1. Staging      ‚îÇ
‚îÇ ‚îú‚îÄ develop      ‚îÇ    ‚îÇ 2. Security      ‚îÇ    ‚îÇ 2. Production   ‚îÇ
‚îÇ ‚îî‚îÄ main         ‚îÇ    ‚îÇ 3. Performance   ‚îÇ    ‚îÇ 3. Monitoring   ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```

## Workflows GitHub Actions

### 1. Workflow Principal: `railway-deploy.yml`

D√©clench√© sur:
- Push sur `main` (production)
- Push sur `develop` (staging)
- Pull requests vers `main`

#### √âtapes:

1. **Tests** (`test` job)
   - Tests unitaires avec pytest
   - Tests d'int√©gration
   - Couverture de code
   - Lint avec flake8, black, isort
   - Scan de s√©curit√© avec bandit

2. **Build** (`build` job)
   - Construction de l'image Docker
   - Tests de l'image
   - Validation du health check

3. **D√©ploiement Staging** (`deploy-staging` job)
   - D√©ploiement automatique sur `develop`
   - Tests de sant√© post-d√©ploiement
   - Validation des fonctionnalit√©s

4. **D√©ploiement Production** (`deploy-production` job)
   - D√©ploiement automatique sur `main`
   - Tests de sant√© post-d√©ploiement
   - Notifications Slack

5. **Tests Lighthouse** (`lighthouse` job)
   - Tests de performance
   - Audit d'accessibilit√©
   - Validation PWA

### 2. Workflow Performance: `performance-tests.yml`

D√©clench√©:
- Quotidiennement √† 2h du matin
- Manuellement via workflow_dispatch

#### Tests inclus:
- Tests de charge avec K6
- Tests de stress
- M√©triques de performance
- Rapports automatis√©s

### 3. Workflow S√©curit√©: `security-scan.yml`

D√©clench√©:
- Push sur branches principales
- Hebdomadairement le lundi

#### Scans inclus:
- Trivy (vuln√©rabilit√©s containers)
- Snyk (d√©pendances)
- OWASP ZAP (s√©curit√© web)
- Bandit (code Python)

## Configuration des Secrets

### Secrets GitHub Requis

```bash
# Railway
RAILWAY_TOKEN_STAGING=<token-staging>
RAILWAY_TOKEN_PRODUCTION=<token-production>

# URLs
STAGING_URL=https://lataupe-bunker-staging.railway.app
PRODUCTION_URL=https://lataupe-bunker.railway.app

# Notifications
SLACK_WEBHOOK_URL=<webhook-url>

# S√©curit√©
SNYK_TOKEN=<snyk-token>
CODECOV_TOKEN=<codecov-token>
```

### Configuration des Tokens Railway

1. **Obtenir les tokens:**
   ```bash
   railway login
   railway tokens create
   ```

2. **Configurer dans GitHub:**
   - Settings ‚Üí Secrets and variables ‚Üí Actions
   - Ajouter chaque secret individuellement

## Environnements

### Staging
- **Branch:** `develop`
- **URL:** https://lataupe-bunker-staging.railway.app
- **Base de donn√©es:** PostgreSQL staging
- **D√©ploiement:** Automatique sur push
- **Tests:** Complets mais non-bloquants

### Production
- **Branch:** `main`
- **URL:** https://lataupe-bunker.railway.app
- **Base de donn√©es:** PostgreSQL production
- **D√©ploiement:** Automatique apr√®s validation
- **Tests:** Complets et bloquants

## Tests Automatis√©s

### 1. Tests Unitaires

```python
# Exemple de test
def test_health_endpoint(client):
    response = client.get('/health')
    assert response.status_code == 200
    assert response.json['status'] == 'healthy'
```

Configuration pytest:
```ini
[tool:pytest]
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*
addopts = --cov=. --cov-report=xml --cov-report=html
```

### 2. Tests d'Int√©gration

```python
# Test avec base de donn√©es
def test_user_registration(client, db):
    data = {
        'username': 'testuser',
        'email': 'test@example.com',
        'password': 'securepassword'
    }
    response = client.post('/register', json=data)
    assert response.status_code == 201
```

### 3. Tests de Performance

```javascript
// K6 load test
import http from 'k6/http';
import { check } from 'k6';

export let options = {
  stages: [
    { duration: '2m', target: 10 },
    { duration: '5m', target: 10 },
    { duration: '2m', target: 0 },
  ],
};

export default function() {
  let response = http.get('https://your-app.railway.app/');
  check(response, {
    'status is 200': (r) => r.status === 200,
    'response time < 500ms': (r) => r.timings.duration < 500,
  });
}
```

## Monitoring et Alertes

### 1. Health Checks

Endpoint automatiquement test√©:
```bash
GET /health
```

R√©ponse attendue:
```json
{
  "status": "healthy",
  "database": "healthy",
  "cache": "healthy",
  "version": "2.0.0"
}
```

### 2. M√©triques Lighthouse

Tests automatiques:
- Performance > 90
- Accessibility = 100
- Best Practices = 100
- SEO > 90
- PWA = 100

### 3. Notifications Slack

Messages automatiques:
- ‚úÖ D√©ploiement r√©ussi
- ‚ùå D√©ploiement √©chou√©
- ‚ö†Ô∏è Tests de performance d√©grad√©s
- üîí Vuln√©rabilit√©s d√©tect√©es

## Gestion des √âchecs

### 1. √âchec de Tests

```yaml
# Workflow continue m√™me si tests √©chouent (staging)
continue-on-error: true  # Staging seulement

# Workflow s'arr√™te si tests √©chouent (production)
continue-on-error: false  # Production
```

### 2. √âchec de D√©ploiement

Actions automatiques:
1. Notification Slack imm√©diate
2. Logs d√©taill√©s dans GitHub Actions
3. Rollback automatique si configur√©

### 3. Rollback Automatique

```bash
# En cas d'√©chec du health check
if ! curl -f $PRODUCTION_URL/health; then
  railway rollback $PREVIOUS_DEPLOYMENT
fi
```

## Optimisations CI/CD

### 1. Cache des D√©pendances

```yaml
- name: Cache Python dependencies
  uses: actions/cache@v3
  with:
    path: ~/.cache/pip
    key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
```

### 2. Parall√©lisation

```yaml
strategy:
  matrix:
    python-version: [3.11]
    os: [ubuntu-latest]
  fail-fast: false
```

### 3. Conditions de D√©ploiement

```yaml
# D√©ployer seulement si tests passent
needs: [test, build]
if: github.ref == 'refs/heads/main'
```

## M√©triques et KPIs

### 1. M√©triques de D√©ploiement

- **Fr√©quence:** Plusieurs fois par jour
- **Lead Time:** < 10 minutes
- **MTTR:** < 30 minutes
- **Taux de r√©ussite:** > 95%

### 2. M√©triques de Qualit√©

- **Couverture de code:** > 80%
- **Tests passants:** 100%
- **Vuln√©rabilit√©s:** 0 critiques
- **Performance:** Score Lighthouse > 90

### 3. M√©triques Op√©rationnelles

- **Uptime:** > 99.9%
- **Response time:** < 200ms (p95)
- **Error rate:** < 0.1%
- **Throughput:** 1000+ req/min

## Bonnes Pratiques

### 1. Commits

```bash
# Format des commits
feat: add user authentication
fix: resolve database connection issue
docs: update deployment guide
test: add integration tests for API
```

### 2. Branches

```bash
# Strat√©gie de branches
main        # Production stable
develop     # Staging/d√©veloppement
feature/*   # Nouvelles fonctionnalit√©s
hotfix/*    # Corrections urgentes
```

### 3. Pull Requests

- Tests automatiques requis
- Review obligatoire
- Squash merge recommand√©
- Description d√©taill√©e

### 4. Releases

```bash
# Tags s√©mantiques
git tag -a v2.0.0 -m "Release version 2.0.0"
git push origin v2.0.0
```

## Troubleshooting

### Probl√®mes Courants

#### 1. Tests √âchouent

```bash
# Ex√©cuter localement
pytest -v
flake8 .
black --check .
```

#### 2. D√©ploiement √âchou√©

```bash
# V√©rifier les logs
railway logs --deployment <id>

# V√©rifier la configuration
railway status
```

#### 3. Health Check KO

```bash
# Tester localement
curl http://localhost:8080/health

# V√©rifier les d√©pendances
railway variables
```

## Commandes Utiles

```bash
# CI/CD local
act                              # Ex√©cuter GitHub Actions localement
docker build -f Dockerfile.railway .  # Build local

# Tests
pytest --cov=.                   # Tests avec couverture
flake8 .                         # Lint
black .                          # Format
safety check                     # S√©curit√© d√©pendances

# Railway
railway logs                     # Logs d√©ploiement
railway status                   # Status service
railway restart                  # Red√©marrage
```

Ce guide couvre l'ensemble du pipeline CI/CD pour Lataupe Bunker Tech. Pour des questions sp√©cifiques, consultez les logs GitHub Actions ou contactez l'√©quipe DevOps.
"""
    
    return docs

def main():
    """Fonction principale pour cr√©er les scripts d'automatisation Railway"""
    project_path = "/home/ubuntu/lataupe-bunker-tech"
    
    print("ü§ñ Cr√©ation des scripts d'automatisation Railway...")
    print("=" * 55)
    
    # Cr√©er les dossiers n√©cessaires
    scripts_dir = os.path.join(project_path, 'scripts')
    docs_dir = os.path.join(project_path, 'docs')
    
    for directory in [scripts_dir, docs_dir]:
        os.makedirs(directory, exist_ok=True)
    
    # Cr√©er les scripts CLI
    cli_scripts = create_railway_cli_scripts()
    for filepath, content in cli_scripts.items():
        full_path = os.path.join(project_path, filepath)
        os.makedirs(os.path.dirname(full_path), exist_ok=True)
        with open(full_path, 'w') as f:
            f.write(content)
        # Rendre les scripts ex√©cutables
        if filepath.endswith('.sh'):
            os.chmod(full_path, 0o755)
    
    # Cr√©er la documentation
    documentation = create_railway_documentation()
    for filepath, content in documentation.items():
        full_path = os.path.join(project_path, filepath)
        os.makedirs(os.path.dirname(full_path), exist_ok=True)
        with open(full_path, 'w') as f:
            f.write(content)
    
    print("\\n‚úÖ Scripts d'automatisation Railway cr√©√©s avec succ√®s!")
    print("\\nüìã Scripts CLI cr√©√©s:")
    for script in cli_scripts.keys():
        print(f"   ‚Ä¢ {script}")
    
    print("\\nüìö Documentation cr√©√©e:")
    for doc in documentation.keys():
        print(f"   ‚Ä¢ {doc}")
    
    print("\\nüöÄ Utilisation des scripts:")
    print("   1. Configuration initiale: ./scripts/railway-setup.sh")
    print("   2. D√©ploiement: ./scripts/railway-deploy.sh")
    print("   3. Monitoring: ./scripts/railway-monitor.sh")
    print("   4. Rollback: ./scripts/railway-rollback.sh")
    
    print("\\nüìñ Documentation disponible:")
    print("   ‚Ä¢ Guide de d√©ploiement: docs/RAILWAY_DEPLOYMENT.md")
    print("   ‚Ä¢ Guide CI/CD: docs/CICD_GUIDE.md")
    
    print("\\nüîß Prochaines √©tapes:")
    print("   1. Configurer les secrets GitHub")
    print("   2. Ex√©cuter railway-setup.sh")
    print("   3. Tester le d√©ploiement")
    print("   4. Configurer le monitoring")
    
    return True

if __name__ == "__main__":
    main()

